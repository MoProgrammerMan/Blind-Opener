/*********
  Yusuf Elazzazi
  Code adopted from https://randomnerdtutorials.com  
*********/

#include <WiFi.h>
 // create servo object to control a servo
// twelve servo objects can be created on most boards

// GPIO the servo is attached to
static const int servoPin = 13;

// Replace with your network credentials
const char* ssid     = "Covid Isolation Center";
const char* password = "ihaveacough";

// Set web server port number to 80
WiFiServer server(80);

// Variable to store the HTTP request
String header;

// Decode HTTP GET value
String valueString = String(5);
int pos1 = 0;
int pos2 = 0;

// Current time
unsigned long currentTime = millis();
// Previous time
unsigned long previousTime = 0; 
// Define timeout time in milliseconds (example: 2000ms = 2s)
const long timeoutTime = 2000;
 char webpage[] PROGMEM = R"=====( <!DOCTYPE html>

<!-- Code tutorials and demo code from Javascript Academy at https://www.youtube.com/watch?v=R-bSb7xrS5s&t=222s&ab_channel=JavaScriptAcademy and random nerd tutorials at https://randomnerdtutorials.com/esp32-servo-motor-web-server-arduino-ide/-->

<html>
<head>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="data:,">
    <style type="text/css">
        body {
            text-align: center;
            font-family: "Trebuchet MS", Arial;
            margin-left: auto;
            margin-right: auto;
        }

        .slider {
            width: 30vw;
            -webkit-transition: .2s; /* 0.2 seconds transition on hover */
        }

        h1 {
            font-size: 5vw;
            padding: 4px 0px 0px 0px;
            margin-bottom: 0px;
        }

        h2 {
            font-size: 2vw;
            padding: 0px 0px 0px 0px;
            margin-top: 0px;
        }

        .responsive {
            width: 80%;
            max-width: 575px;
            height: auto;
        }

        * {
            box-sizing: border-box;
        }


        .container {
            min-height: 35vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        .controls {
            margin-top: 16px;
        }

        .button {
            font-weight: bold;
            border-radius: 5px;
            border: none;
            color: white;
            padding: 8px 24px;
            margin-left: 4px;
            cursor: pointer;
        }

        .set-alarm {
            background-color: #498AFB;
        }

        .clear-alarm {
            background-color: #FF3860;
        }

        #clock {
            font-size: 7vw;
            padding: 20px 5px 5px 5px
        }
    </style>
</head>
<body>
    <h1>
        <img src="https://imgur.com/zsqg0jw.png" alt="blindslogo" id="logo" class="responsive">
    </h1>
    <h2>Position: <span id="servoPos"></span></h2>
    <input type="range" min="0" max="100" class="slider" id="servoSlider" onchange="motor(this.value)" />
    <script>
        var slider = document.getElementById("servoSlider");
        var servoP = document.getElementById("servoPos");
        servoP.innerHTML = slider.value;
        slider.oninput = function () {
            slider.value = this.value;
            servoP.innerHTML = this.value;
        }

        $.ajaxSetup({ timeout: 1000 });
        function motor(pos) {
            $.get("/?value=" + pos + "&");
            { Connection: close };
            if (pos < 25) {
                document.getElementById("logo").src = "https://imgur.com/zsqg0jw.png";
            }
            if (pos > 25) {
                document.getElementById("logo").src = "https://imgur.com/oFkK7wY.png";
            }
            if (pos > 50) {
                document.getElementById("logo").src = "https://imgur.com/G443F9v.png";
            }
            if (pos > 75) {
                document.getElementById("logo").src = "https://imgur.com/A5KGlZR.png";
            }
        }
    </script>
    <section class="container">
        <div id="clock"></div>
        <input onchange="setAlarmTime(this.value)" name="alarmTime" type="datetime-local" />
        <div class="controls">
            <button onclick="setAlarm()" class="button set-alarm">Set alarm</button>
            <button onclick="clearAlarm()" class="button clear-alarm">Stop alarm</button>
        </div>
    </section>
    <script type="text/javascript">
        const display = document.getElementById('clock');
        const alarm = new Audio('https://audio-previews.elements.envatousercontent.com/files/106595456/preview.mp3?response-content-disposition=attachment%3B+filename%3D%225UBZP7Q-danger-alarm.mp3%22');
        alarm.loop = true;
        let alarmTime = null;
        let alarmTimeout = null;

        function updateTime() {
            const date = new Date();
            const hour = formatTime(date.getHours());
            const minutes = formatTime(date.getMinutes());
            const seconds = formatTime(date.getSeconds());

            display.innerText = `${hour}:${minutes}:${seconds}`;

        }

        function formatTime(time) {
            if (time < 10) {
                return '0' + time;
            }
            return time;
        }
        function setAlarmTime(value) {
            alarmTime = value;
        }

        function setAlarm() {
            if (alarmTime) {
                const current = new Date();
                const timeToAlarm = new Date(alarmTime);


                if (timeToAlarm > current) {
                    document.getElementById("servoSlider").value = 0;
                    document.getElementById("servoPos").value = "0";
                    servoP.innerHTML = "0";
                    $.get("/?value=" + 0 + "&");
                    { Connection: close };
                    const timeout = timeToAlarm.getTime() - current.getTime();
                    alarmTimeout = setTimeout(() => alarmArm(), timeout);
                }
            }
        }


        function alarmArm() {
            alarm.play();
            $.get("/?value=" + 100 + "&");
            { Connection: close };
            document.getElementById("servoSlider").value = 100;
            document.getElementById("servoPos").value = "100";
            servoP.innerHTML = "100";
        }



        function clearAlarm() {
            alarm.pause();
            if (alarmTimeout) {
                clearTimeout(alarmTimeout);
                alert("Threat neutralized");
            }
        }
        setInterval(updateTime, 1000);</script>
</body>

</html>)=====";
 
void setup() {
  Serial.begin(115200);
  pinMode(13, OUTPUT);
  pinMode(12, OUTPUT); 

  // Connect to Wi-Fi network with SSID and password
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  // Print local IP address and start web server
  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  server.begin();
}

void loop(){
  WiFiClient client = server.available();   // Listen for incoming clients

  if (client) {                             // If a new client connects,
    currentTime = millis();
    previousTime = currentTime;
    Serial.println("New Client.");          // print a message out in the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected() && currentTime - previousTime <= timeoutTime) { // loop while the client's connected
      currentTime = millis();
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        header += c;
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();

            // Display the HTML web pageclient.println("); 

            client.println(webpage); 
                          
            //GET /?value=180& HTTP/1.1
            if(header.indexOf("GET /?value=")>=0) {
              pos1 = header.indexOf('=');
              pos2 = header.indexOf('&');
              valueString = header.substring(pos1+1, pos2);
              
              if(valueString.toInt() < 50){
                
               int delayTime = 200 * valueString.toInt();
               digitalWrite(13, HIGH);
               digitalWrite(12, LOW);
               delay(delayTime);
                
              Serial.println(" Motor Rotating Value is");
              Serial.println(valueString);
              }
              else if(valueString.toInt() > 50){
                int delayTime = 200 * (valueString.toInt() - 50);
                digitalWrite(13, LOW);
                digitalWrite(12, HIGH);
                delay(delayTime);}
                
              else{
                            digitalWrite(13, LOW);
                            digitalWrite(12, LOW);
              }             //Rotate the servo
            
            }         
            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          } else { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
}
